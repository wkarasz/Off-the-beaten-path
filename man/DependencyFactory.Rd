\name{DependencyFactory}
\alias{DependencyFactory}
\alias{DependencyFactory.createDependency}
\alias{DependencyFactory.createForwardDependency}
\alias{DependencyFactory.createService}
\alias{DependencyFactory.generateForwardSessionReference}
\title{DependencyFactory}
\description{
  A factory for dependency Conditions that specify that a Session or Invocation will not be allowed to run until other Sessions or Invocations have completed.
}
\usage{
  DependencyFactory.createDependency(sessionId, cancelOnFailure)
  DependencyFactory.createDependency(sessionId, invocationId, cancelOnFailure)
  DependencyFactory.createForwardDependency(forwardSessionReference , cancelOnFailure)
  DependencyFactory.createForwardDependency(forwardSessionReference , taskId, cancelOnFailure)
  DependencyFactory.createService(forwardSessionReference, serviceName, initData, options, description, condition = NULL, typeR = TRUE)
  DependencyFactory.generateForwardSessionReference()
}
\details{
  A dependency can specify that if the dependent Invocation fails or Invocation is cancelled, the Invocation or Session to which it is assigned will be also cancelled.
  A dependency \code{Condition} is assigned in \code{Service.submit}/\code{Service.execute}, or to the Session in \code{ServiceFactory.createService}.
  Multiple dependencies can be assigned by using a \code{ConditionSet}.

  \describe{
	\item{DependencyFactory.createDependency(sessionId, cancelOnFailure)}{
	  Creates a dependency on an existing Session.\cr
	  If the dependent Session had not yet been created at the time that Session or Invocation to which this is attached is submitted, it will be cancelled.
	  If the dependent Session has already finished, the dependency will be immediately satisfied.
	  \describe{
		\item{Arguments}{
		  \tabular{ll}{
			\code{sessionId}       \tab The ID of an existing Session\cr
			\code{cancelOnFailure} \tab If \code{TRUE} and the dependent Invocation fails or is cancelled, this will be cancelled.
		  }
		}
		\item{Returns}{
		  \tabular{l}{
			The dependency \code{Condition}
		  }
		}
	  }
	}
  }

  \describe{
	\item{DependencyFactory.createDependency(sessionId, invocationId, cancelOnFailure)}{
	  Creates a dependency on an Invocation in an existing Session.\cr
	  If the dependent Session had not yet been created at the time that Session or Invocation to which this is attached is submitted, it will be cancelled. If the dependent Session has already finished, the dependency will be immediately satisfied.
	  \describe{
		\item{Arguments}{
		  \tabular{ll}{
			\code{sessionId}       \tab The ID of an existing Session\cr
			\code{invocationId}    \tab The dependent Invocation ID\cr
			\code{cancelOnFailure} \tab If \code{TRUE} and the dependent Invocation fails or is cancelled, this will be cancelled.
		  }
		}
		\item{Returns}{
		  \tabular{l}{
			The dependency \code{Condition}
		  }
		}
	  }
	}
  }

  \describe{
	\item{DependencyFactory.createForwardDependency(forwardSessionReference , cancelOnFailure)}{
	  Creates a dependency to a Session that has not yet been created.
	  \describe{
		\item{Arguments}{
		  \tabular{ll}{
			\code{forwardSessionReference} \tab A reference to a Session that has not yet been created, generated by the \code{DependencyFactory.generateForwardSessionReference()} function.\cr
			\code{cancelOnFailure}         \tab If \code{TRUE} and the dependent Invocation fails or is cancelled, this will be cancelled.
		  }
		}
		\item{Returns}{
		  \tabular{l}{
			The dependency \code{Condition}
		  }
		}
	  }
	}
  }

  \describe{
	\item{DependencyFactory.createForwardDependency(forwardSessionReference , taskId, cancelOnFailure)}{
	  Creates a dependency to a Session that has not yet been created.
	  \describe{
		\item{Arguments}{
		  \tabular{ll}{
			\code{forwardSessionReference} \tab A reference to a Session that has not yet been created, generated by \code{DependencyFactory.generateForwardSessionReference()} function.\cr
			\code{taskId}                  \tab The Task ID on which it depends\cr
			\code{cancelOnFailure}         \tab If \code{TRUE} and the dependent Invocation fails or is cancelled, this will be cancelled.
		  }
		}
		\item{Returns}{
		  \tabular{l}{
			The dependency \code{Condition}
		  }
		}
	  }
	}
  }

  \describe{
	\item{DependencyFactory.createService(forwardSessionReference, serviceName, initData, options, description, condition = NULL, typeR = TRUE)}{
	  Creates a new Service Session to which a forward reference can refer Example of the first task in svc1 depending on svc2, created later.
	  \code{
	    ref = DependencyFactory.generateForwardSessionReference();
		cond = DependencyFactory.createForwardDependency(ref, FALSE);
		svc1.submit(method, rs, data, cond);  
	  }
	  \describe{
		\item{Arguments}{
		  \tabular{ll}{
			\code{forwardSessionReference} \tab A reference to a Session that has not yet been created, generated by \code{DependencyFactory.generateForwardSessionReference()} function.\cr
			\code{serviceName}             \tab The name of the registered Service\cr
			\code{initData}                \tab The state initialization data. InitData is not allowed when creating a Shared Service.\cr
			\code{options}                 \tab Service options. Will not override the binding.\cr
			\code{description}             \tab Service description. Will not override the binding.\cr
			\code{condition}               \tab A condition for any invocation to be executed. May be null, meaning no condition.\cr
			\code{typeR}                   \tab If the Service is implemented in R and using the NATIVE_R interface
		  }
		}
		\item{Returns}{
		  \tabular{l}{
			The \code{Service}
		  }
		}
	  }
	}
  }

  \describe{
	\item{DependencyFactory.generateForwardSessionReference()}{
	  Generates a reference to a Session that has not yet been created, for creating forward dependencies.
	  \describe{
		\item{Returns}{
		  \tabular{l}{
			The reference to the session, as character.
		  }
		}
	  }
	}
  }

}
\seealso{
}
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
